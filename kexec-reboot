#!/bin/bash

# This script reads kernel information from the GRUB menu to pass to "kexec".
# Save a script as, e.g., /usr/local/sbin/kexec-reboot and make it executable
# using chmod +x.

# The script takes an item number as its first parameter. E.g., to boot the
# first item in the GRUB menu, type:
#     kexec-reboot 1

# Alternatively, if no number is given, the script will interactively prompt
# for a number.
# The error checking is very basic.
# Written by Isaac G, 2010
# Modified by Greg Fitzgerald, 2011
# Rewritten by jumps-are-op, 2022
# Ripped from the Arch Wiki "kexec" page 7 May 2012:
#     https://wiki.archlinux.org/index.php?title=kexec

die(){
	tput setaf 9 # Red text
	echo "$*" >&2
	tput sgr0 # Reset
	exit 1
}

probe(){
	[ -e "$1" ] || return 1
	GRUB_CONFIG=$1
	GRUB_TITLE=$2  # Command for menu item name
	GRUB_KERNEL=$3  # Command for boot image
}

main(){
	# Config file for Grub 2 overrides original "legacy" one
	probe /boot/grub/grub.cfg menuentry linux ||
	probe /boot/grub/menu.lst title kernel ||
	die "No Grub configuration found"

	# Use the first parameter or show a menu if none is specified
	kernelNum=
	if [ "$1" != "" ];then
		# Make sure the selected number is an integer
		[ "$1" -eq "$1" ] 2>/dev/null ||
			die "The selected parameter is not a number"
		kernelNum=$1
	else
		count=0
		awk -F\' "/$GRUB_TITLE / {print \$2}" "$GRUB_CONFIG" |
			while read -r item;do
				((count+=1))
				echo "$count: $item"
			done

		while true;do
			printf "\n%s\rkernel: " \
				"$(printf "%$(tput cols)s")"
			read -r item || ! echo ||  exit 1

			if [ -z "$item" ];then
				printf "\033[2A"

			elif ! [ "$item" -eq "$item" ] 2>/dev/null;then
				printf "\033[2A"
				tput setaf 9
				printf "%s\rThe selected parameter is not a number" \
					"$(printf "%$(tput cols)s")" >&2
				tput sgr0

			elif [ "$item" = 0 ] || [ "$item" -gt "$(awk -F\' "/$GRUB_TITLE / {print \$2}" "$GRUB_CONFIG" | wc -l)" ];then
				printf "\033[2A"
				tput setaf 9
				printf "%s\rKernel with that number dosen't exist" \
					"$(printf "%$(tput cols)s")" >&2
				tput sgr0

			else
				kernelNum=$item;break
			fi
		done
	fi
	item=0
	while read -r key val extra; do
		[ "$key" = "$GRUB_TITLE" ] && ((item+=1)) # Count the number of menu items
		[ "$item" != "$kernelNum" ] && continue   # Wait until the right number
		[ "$key" = "$GRUB_KERNEL" ] && kernel=$val && append=$extra
		[ "$key" = initrd ] && initrd=$val
	done < "$GRUB_CONFIG"

	[ -n "$kernel" ] || die "Unable to find the kernel (file edited?)"
	
	root=$(stat -c '%m' /boot)
	set -- "$root$kernel"
	[ -n "${initrd+set}" ] && set -- "$@" --initrd="$root$initrd"
	set -- "$@" --append="$append"
	loading=▒▒▒▒▒▒▒▒▒▒
	tmp=$(mktemp)
	{
		kexec "$@" ||
		echo $? > "$tmp"
	} &
	printf "\033[2A%s\n" \
		"$(printf "%$(tput cols)s")"
	tput civis
	while [ "$(<"$tmp")" = "" ];do
		printf "Rebooting..."
		printf "\033[1A\r%s\n" "$loading"
		case "$loading" in
			▒▒▒▒▒▒▒▒▒▒)loading=█▒▒▒▒▒▒▒▒▒;;
			█▒▒▒▒▒▒▒▒▒)loading=██▒▒▒▒▒▒▒▒;;
			██▒▒▒▒▒▒▒▒)loading=███▒▒▒▒▒▒▒;;
			███▒▒▒▒▒▒▒)loading=████▒▒▒▒▒▒;;
			████▒▒▒▒▒▒)loading=█████▒▒▒▒▒;;
			█████▒▒▒▒▒)loading=▒█████▒▒▒▒;;
			▒█████▒▒▒▒)loading=▒▒█████▒▒▒;;
			▒▒█████▒▒▒)loading=▒▒▒█████▒▒;;
			▒▒▒█████▒▒)loading=▒▒▒▒█████▒;;
			▒▒▒▒█████▒)loading=▒▒▒▒▒█████;;
			▒▒▒▒▒█████)loading=█▒▒▒▒▒████;;
			█▒▒▒▒▒████)loading=██▒▒▒▒▒███;;
			██▒▒▒▒▒███)loading=███▒▒▒▒▒██;;
			███▒▒▒▒▒██)loading=████▒▒▒▒▒█;;
			████▒▒▒▒▒█)loading=█████▒▒▒▒▒;;
		esac
		sleep 0.1
	done
	echo "Unable to reboot (exit $(<"$tmp"))"
	rm -rf "$tmp"
	tput cnorm
}

if [ "$(id -u)" != 0 ];then
	tput setaf 9 # Red text
	echo "You need to be superuser" >&2
	tput sgr0 # Reset
	sudo bash -c "clear;$(declare -f main);$(declare -f probe);$(declare -f die);main \"\$@\""
else
	clear
	main "$@"
fi
